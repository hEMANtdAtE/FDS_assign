/*#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

struct node {
   int roll;
   int roll;
	
   struct node *next;
   struct node *prev;
};

//this link always point to first Link
struct node *head = NULL;

//this link always point to last Link 
struct node *last = NULL;

struct node *current = NULL;

//is list empty
bool isEmpty() {
   return head == NULL;
}

int length() {
   int length = 0;
   struct node *current;
	
   for(current = head; current != NULL; current = current->next){
      length++;
   }
	
   return length;
}

//display the list in from first to last
void displayForward() {

   //start from the beginning
   struct node *ptr = head;
	
   //navigate till the end of the list
   printf("\n[ ");
	
   while(ptr != NULL) {        
      printf("(%d,%d) ",ptr->roll,ptr->roll);
      ptr = ptr->next;
   }
	
   printf(" ]");
}

//display the list from last to first
void displayBackward() {

   //start from the last
   struct node *ptr = last;
	
   //navigate till the start of the list
   printf("\n[ ");
	
   while(ptr != NULL) {    
	
      //print roll
      printf("(%d,%d) ",ptr->roll,ptr->roll);
		
      //move to next item
      ptr = ptr ->prev;
      
   }
	
}

//insert link at the first location
void insertFirst(int roll, int roll) {

   //create a link
   struct node *link = (struct node*) malloc(sizeof(struct node));
   link->roll = roll;
   link->roll = roll;
	
   if(isEmpty()) {
      //make it the last link
      last = link;
   } else {
      //update first prev link
      head->prev = link;
   }

   //point it to old first link
   link->next = head;
	
   //point first to new first link
   head = link;
}

//insert link at the last location
void insertLast(int roll, int roll) {

   //create a link
   struct node *link = (struct node*) malloc(sizeof(struct node));
   link->roll = roll;
   link->roll = roll;
	
   if(isEmpty()) {
      //make it the last link
      last = link;
   } else {
      //make link a new last link
      last->next = link;     
      
      //mark old last node as prev of new link
      link->prev = last;
   }

   //point last to new last node
   last = link;
}

//delete first item
struct node* deleteFirst() {

   //save reference to first link
   struct node *tempLink = head;
	
   //if only one link
   if(head->next == NULL){
      last = NULL;
   } else {
      head->next->prev = NULL;
   }
	
   head = head->next;
   //return the deleted link
   return tempLink;
}

//delete link at the last location

struct node* deleteLast() {
   //save reference to last link
   struct node *tempLink = last;
	
   //if only one link
   if(head->next == NULL) {
      head = NULL;
   } else {
      last->prev->next = NULL;
   }
	
   last = last->prev;
	
   //return the deleted link
   return tempLink;
}

//delete a link with given roll

struct node* delete(int roll) 
{

   //start from the first link
   struct node* current = head;
   struct node* previous = NULL;
	
   //if list is empty
   if(head == NULL) {
      return NULL;
   }

   //navigate through list
   while(current->roll != roll) {
      //if it is last node
		
      if(current->next == NULL) {
         return NULL;
      } else {
         //store reference to current link
         previous = current;
			
         //move to next link
         current = current->next;             
      }
   }

   //found a match, update the link
   if(current == head) {
      //change first to point to next link
      head = head->next;
   } else {
      //bypass the current link
      current->prev->next = current->next;
   }    

   if(current == last) {
      //change last to point to prev link
      last = current->prev;
   } else {
      current->next->prev = current->prev;
   }
	
   return current;
}

bool insertAfter(int roll, int newroll, int roll) {
   //start from the first link
   struct node *current = head; 
	
   //if list is empty
   if(head == NULL) {
      return false;
   }

   //navigate through list
   while(current->roll != roll) {
	
      //if it is last node
      if(current->next == NULL) {
         return false;
      } else {           
         //move to next link
         current = current->next;
      }
   }
	
   //create a link
   struct node *newLink = (struct node*) malloc(sizeof(struct node));
   newLink->roll = newroll;
   newLink->roll = roll;

   if(current == last) {
      newLink->next = NULL; 
      last = newLink; 
   } else {
      newLink->next = current->next;         
      current->next->prev = newLink;
   }
	
   newLink->prev = current; 
   current->next = newLink; 
   return true; 
}

int main() 
{
   insertFirst(1,10);
   insertFirst(2,20);
   insertFirst(3,30);
   insertFirst(4,1);
   insertFirst(5,40);
   insertFirst(6,56); 

   printf("\nList (First to Last): ");  
   displayForward();
	
   printf("\n");
   printf("\nList (Last to first): "); 
   displayBackward();

   printf("\nList , after deleting first record: ");
   deleteFirst();        
   displayForward();

   printf("\nList , after deleting last record: ");  
   deleteLast();
   displayForward();

   printf("\nList , insert after roll(4) : ");  
   insertAfter(4,7, 13);
   displayForward();

   printf("\nList  , after delete roll(4) : ");  
   delete(4);
   displayForward();
}*/

#include <stdio.h>
#include<stdlib.h>
#include<string.h>
struct node 
{
  int roll,marks;
  char name[20];
  struct node *prev,*next;
};

struct node* inrec(struct node * head)
{ 
 int std;
 char n[20];
 struct node *temp,*q;
 q=head;
 printf("Number of students to be entered \n");
 scanf("%d",&std);
 printf("Enter the data:\n");
 for(int i=0;i<std;i++)
{
  temp=(struct node *)malloc(sizeof(struct node));
  printf("Enter roll_no :");
  scanf("%d",&temp->roll);
  printf("Enter name :");
  scanf("%s",temp->name);
  printf("Enter marks :");
  scanf("%d",&temp->marks);
  printf("\n");
  temp->next=NULL;
  temp->prev=head;
  head->next=temp;
  head=head->next;
}
 return q;
}

void display(struct node *head)
{ 
  struct node *p;
  p=head;
  while(p!=NULL)
  {
    printf("%d\t",p->roll);
    printf("%s\t",p->name);
    printf("%d\n",p->marks);
    p=p->next;
  }

}

void del(struct node *head)
{ 
  int po;
  printf("Enter roll number to delete the record\n");
  scanf("%d",&po);

  struct node *p,*q;
  p=head;
  q=head->next;

  while(p->roll!=po)
  {
    p=p->next;
    q=q->next;
  }
  p->prev->next=p->next;
  q->prev=p->prev;
  free(p);
}

void dels(struct node *head)
{
  struct node *p=head;
  head=head->next;
  head->prev=NULL;
  free(p);
  printf("deleted succesfully\n");
}

void dell(struct node *head)
{
  struct node *p=head;
  while(p!=NULL&&p->next!=NULL)
  {
    p=p->next;

  }
  p->prev->next=NULL;
  free(p);

}

int main(void) {
  int a,ch; char n[20];
  struct node *head;
  head=(struct node *)malloc(sizeof(struct node));
  
  head->roll=00;
  strcpy(head->name,"Name");
  head->marks=00;
  head->prev=NULL;
  head->next=NULL;

do
{
  printf("\nEnter the choice \n1) Add a record\n2) Delete a roll no between first and last \n3) Delete a roll no present at starting\n4) Deleting a roll no at end\n5) Display list\n");
  scanf("%d",&a);
  switch(a)
  {
    case 1:
    head=inrec(head);
    break;
    case 2:
    del(head);
    break;
    case 3:
    dels(head);
    break;
    case 5:
    display(head);
    break;
    case 4:
    dell(head);
    break;
   
  }
  printf("Press 1 to continue:\t"); scanf("%d",&ch);

}while(ch);

}
